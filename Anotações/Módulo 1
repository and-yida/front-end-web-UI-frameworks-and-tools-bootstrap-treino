FULL STACK WEB DEVELOPMENT

Em front-end web UI development, utilizaremos principalmente Bootstrap 4.
A apresentação do site geralmente é construída com HTML, CSS e JavaScript, é gerada no lado do servidor e enviada para o lado do cliente sob a forma de uma página web.
Existe uma outra tendência que utiliza uma única linguagem para implementar todo o stack, com JavaScript. O front-end seria uma aplicação usando frameworks como Angular e React, a lógica server-side seria impletada usando tecnologias como NodeJS e banco de dados com tecnologias como MongoDB e JSON. A troca de informações entre o server side e o client side é geralmente feita usando JSON como formato e o server-side com suporte a REST API endpoint.


NODE.JS E NPM

JavaScript nasceu como uma linguagem de marcação para navegador. Node.js nasceu da ferramenta de runtime JavaScript criada para o navegador Chrome. Node.js permite dar suporte à execução de programas em JavaScript no desktop.
Node Core e Standart Library são as ferramentas que nos permitem escrever programas JavaScript e rodá-los no computador. Foram criado utilitários para desenvolvimento web e também para back-end.
NPM (Node package manager) é o gerenciador do ecossistema do Node. Um pacote em Node consiste um arquivos JS e um package.json.

Package.json

Finalidades do package.json:
    Fornece documentação de quais pacotes o seu projeto está contando com;
    Permite especificar as versões desses pacotes utilizados;
    Torna sua build reproduzível, de forma que outras pessoas com acesso ao seu projeto consigam instalar os mesmos pacotes necessários.
Ao criar um novo projeto, é necessário inicar o package.json no terminal usando: npm init
Os pacotes também devem ser instalados, como, por exemplo: npm install lite-server --save-dev
É criada a pasta /node_modules com os arquivos necessário a esse pacote, e, além disso, tantos outros que são instalados conjuntamente, aos quais aquele é dependente.
No arquivo package.json, vamos adicionar:
  "scripts": {
    "start": "npm run lite",
    "test":
    "lite": "lite-server"
    //npm start no terminal irá iniciar o Lite Server, fazendo com que o projeto seja acessível através do localhost no navegador.
A página no navegador irá refletir automaticamente as mudanças que fazemos nos arquivos.
Criar um arquivo chamado .gitignore e colocar o nome de arquivos e pastas fará com que essas pastas sejam ignoradas ao fazer um commit. Esses arquivos também são ignorados quando alguém clona seu repositório. A pasta /node_modules pode ser ignorada pois o package.json já contém as informações dos pacotes necessários.

FRONT-END UI FRAMEWORKS

Front-end UI frameworks são coleções de HTML, CSS E JavaScript templates para interface de usuário (UI) componentes. Eles definem uma série de classes de CSS que permitem incluir componentes como botões, tabelas, barras de navegação, alertas, etc.; permitem definir de forma consistente a tipografia utilizada no design do site. Em suma, as frameworks auxiliam a fazer rapidamente o design e implementação de um site.
Por que utilizá-los?
  Design responsivo;
  Compatibilidade entre navegadores;
  Otimiza o tempo;
  Suporte da comunidade.

BOOTSTRAP

Bootstrap é uma UI framework.
No terminal, instalar:
  npm install bootstrap@4.0.0
  npm install jquery@3.3.1 popper.js@1.12.9 --save
Instalar (ou dar start) o Lite Server.

No arquivo html, é necessário incluir o boilerplate no head.
    <!-- Required meta tags always come first -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="x-ua-compatible" content="ie=edge">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="node_modules/bootstrap/dist/css/bootstrap.min.css">

    //o arquivo bootstrap.min.cass contém as classes CSS do Bootstrap
Logo acima do encerramento do body, incluir o script do jQuery, do Popper.js e do Bootstrap min.js.
    <!-- jQuery first, then Popper.js, then Bootstrap JS. -->
    <script src="node_modules/jquery/dist/jquery.slim.min.js"></script>
    <script src="node_modules/popper.js/dist/umd/popper.min.js"></script>
    <script src="node_modules/bootstrap/dist/js/bootstrap.min.js"></script>
O CSS é colocado no início pois quando a página estiver sendo carregada de um servidor, você quer que as classes do CSS sejam carregadas imediatamente para que a página comece a ser renderizada. O código JavaScript vai sendo carregado depois, o que leva mais algum tempo, e por isso fica na parte inferior da corpo do código.

Design responsivo
O desenvolvimento de uma aplicação web deve levar em conta a adaptação à janela de exibição do dispostivo do usuário.
O desenvolvimento mobile first se volta primeiramente ao design para celular, e considera depois satisfazer os requisitos para estender a tela para outros dispositivos maiores. Isso deve ser feito automaticamente baseado em informações obtidas do dispositivo do usuário.

Media queries
Media queries são tecnologias CSS para aplicar estilos baseados no tamanho da janela de exibição.
É possível espeficicar a largura mínima de uma tela em que certas classes CSS serão ativadas, através de: @media () { }
Ex.:
  @media (min-width: 992px) {
    
  }
  //customização para desktop

Grid System
A meta tag viewport no index.html indica que quando a página está sendo renderizada pelo navegador, este irá aferir o tamanho da tela e automaticamente adptará a renderização. As classes CSS atreladas aquele tamanho serão acessadas. Isso é encargo do Bootstrap grid system.
O Bootstrap grid se aproveita da flexibilidade das opções de layout em CSS, baseada em caixas (containers).
Usamos "div" para definir um elemento ao qual aplicamos a classe container. O container é a unidade que abriga o conteúdo propriamente dito do elemento. Esses containers podem ter tamanho fixo, sendo o tamanho deles automaticamente adaptados de acordo com a janela de exibição; ou podemos especificá-los.
Dentro do container temos um outro div "row" (linha) dividida em 12 colunas. Podemos especificar ainda outros divs dentro desse, nos quais o conteúdo teremos conteúdos. Em diferentes tamanhos de tela, é o conteúdo dessas colunas que será automaticamente ajustado, respeitando a largura permitida para aquele div.
Bootstrap tem 5 classes pré-determinadas de tamanhos de telas - sm, md, lg e xl. As classes de tamanho das colunas ("col") indicam quantas colunas da linha aquele pedaço do conteúdo ocupa.
Ex.:
  <div class="container">
  <div class="row">
  <div class="col-sm-5">
  //o div col ocupa 5 das 12 colunas.
Se não definirmos tamanhos, o auto-layout divide as 12 colunas entre os divs.
Ex.: se tivermos 3 divs, cada um ocupará 4 colunas.
Há diversas possibilidades de dispor os divs. Ex.: alinhar o conteúdo das colunas verticalmente e centralizado: <div class="row align-items-center">
O componente "jumbotron" permite colocar o conteúdo daquele div à parte do restante da página.

Custom classes
No arquivo styles.css, criamos classes para estilizar a página.
Alterar rows: .row-header {}; .row-content {}
  .elemento {
    margin: top right bottom left
  }  
O primeiro valor é responsável pelo topo, a segunda pela direita, a terceira pela da base e a quarta pela esquerda.
padding: dá um espaçamento interno.
margin: espaçamento externo.
Ex.: margin: 0px auto
No head, indicar o arquivo CSS:
  <link rel="stylesheet" href="css/styles.css">
Nos parâmetros dos divs que queremos estilizar, indicar o respectivo elemento declarado no CSS.
Ex.:
  <div class="row row-header">
Centralizar texto: <div class="text-center">
Centralizar conteúdo de uma coluna verticalmente em relação à linha: <div class="align-self-center">
Display property: afeta a exibição de classes de acordo com o tamanho da tela.
  .d-{value} .d-{breakpoint}-{value}
  os valores podem ser: none, inline, inline-block, block, table; etc.
Ex.:
  <span class="d-none d-sm-block"> //invisível apenas no xs (extra small)




